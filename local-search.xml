<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo管理</title>
    <link href="/2024/11/27/hexo%E7%AE%A1%E7%90%86/"/>
    <url>/2024/11/27/hexo%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">C:</span>\Hexo\blog<br></code></pre></td></tr></table></figure><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">hexo <span class="hljs-built_in">new</span> <span class="hljs-built_in">post</span><br></code></pre></td></tr></table></figure><h2 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> page aaa<br></code></pre></td></tr></table></figure><h2 id="新建分类"><a href="#新建分类" class="headerlink" title="新建分类"></a>新建分类</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> page categories<br></code></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span>: Llama_factory<br><span class="hljs-attribute">date</span>: <span class="hljs-number">2024</span>-<span class="hljs-number">11</span>-<span class="hljs-number">27</span> <span class="hljs-number">01</span>:<span class="hljs-number">38</span>:<span class="hljs-number">54</span><br><span class="hljs-attribute">type</span>: <span class="hljs-string">&quot;categories&quot;</span><br></code></pre></td></tr></table></figure><h2 id="在文章前加："><a href="#在文章前加：" class="headerlink" title="在文章前加："></a>在文章前加：</h2><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">categories:</span> Llam<span class="hljs-built_in">a_factory</span><br></code></pre></td></tr></table></figure><h2 id="本地启动："><a href="#本地启动：" class="headerlink" title="本地启动："></a>本地启动：</h2><p><a href="uri"></a><a href="http://localhost:4000/admin/">http://localhost:4000/admin/</a><br><a href="uri"></a><a href="http://localhost:4000/">http://localhost:4000</a></p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p><a href="uri"></a> <a href="https://dns.console.aliyun.com/?spm=5176.100251.111252.17.7e7e4f15YdaDG6#/dns/domainList">https://dns.console.aliyun.com/?spm=5176.100251.111252.17.7e7e4f15YdaDG6#/dns/domainList</a></p>]]></content>
    
    
    <categories>
      
      <category>hexo使用</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>启动</title>
    <link href="/2024/11/27/%E5%90%AF%E5%8A%A8/"/>
    <url>/2024/11/27/%E5%90%AF%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="诶呀，不太对呢！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="df6753d40f1318b943bd84b5b85eb079c248e7573b9fe923e654ad336bf51f48"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">猜一猜？</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>6.s081</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6.s081 Lab1</title>
    <link href="/2024/11/27/6-s081-Lab1/"/>
    <url>/2024/11/27/6-s081-Lab1/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="诶呀，不太对呢！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="38a2dabb1529b02020dbca59fd282aca6e4abb340444f808f007c746be650345"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">猜一猜？</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>6.s081</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6.s081 Lab2</title>
    <link href="/2024/11/27/6-s081-Lab2/"/>
    <url>/2024/11/27/6-s081-Lab2/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="诶呀，不太对呢！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="76a50534ea85bb9a6f277608148651aabbf9048dc2e8c0de5a9cf2c97e483654">2538d295d8c95c40e73de90028ce6339f5da288585b44fb182761098886cca00aedba63a89cd0a481a8f9e09d3c69fbc6b3525a2172e82bb2e08d58a7c1d99061c21ca2dc4a6816ed3851dfd949c8ab9c43839f02e38cb10b400a789a7285be77a320a7bc71814d5e67427cbe82fddaf593917b9697e0617afbe61217aac4742b3921566254130dae62312552729240372636368fdfe020aec7f8623d1ab0b6e962ce336867926461f7859dec0fc5a499d7f0f74be3c3f66cc93715e90c694008e785daa5fa669c7cdabfb8104b61fd5f43f21c9ee098309fca0c789dda0e4b86a1c54917da7e7fc63eb50df935484cadb500c6d16ec89e17aec670c0b08ade0f039738ee27f1b278dd5e1420bede134c51d71923fa7632d12fb72e2b258c01af3caeec85670526167112c3ddf53e9e81feb9837a6702b1397cde5da746e602f99df80881b6db6e7648c9999065a5c3800b0db9877f845938fc0d25df3649b2ee180c33f554ceae2c465b3847dd32b6f5e689a027438a6b0031a2045ac64871eb09d45b1334f72db86a8f8496ae6ade32619660b38202c67c33b6be346762f2710672f1af1fe8d2b4b615f342816d4c0d38aad799aaffa6004fc7bd01347332edfdb313d7d7531f9cfc195c9b5fadc3558a2f6fca281feea88f147e2fbab4047e27b256e60d4f67284df59efb99af0510bc7b6ecbe5357de074120020f714f66771e546db59a1a6d377ddaf85ea9874a9cf66ff373d7e1d6588def64c2b9bc39923e79052ed82b03766f934221d44cfb784c09400dbae2c987c573d61b6ae8404b5193be0edfdf321ecf452fb5efe88af3eec8e54e223ca8eca76efd2dc1b4ecd64084b9a6c968923b40cc8928b94c9f6424665dc54442abd45ebb6a769eac642604c43789a84ba33494ac4062ca17568a7dab1450e1c4a908b6584aacf21bf4286785fdfcebcbe833cf0ff9cc4524b75184dd4e78e96fa3468eb8d77299e936700feabde99c3b582e89196588bc2d9c5747dbe78f564ce142cec1425ac2570c01e6ad6e0d26b4c5c7e5c5bd2ddc036a2e2cea730bd2e4e6ecc2f818fcf0bbf95d8957a00f65c627705ce4482ba1a384f0fce7adc9d80b1d99bb8c9c6f51771b43f8eda9271685be1f0755eb1e7e4e7d19ab4eaad27f0ebfc3b3dfe5757d50cf4e1fc2898cf6de8abacdd28656e6c248efa58bb18f2095a8cf9ed004564238489eae45f03e02d18ec17d6b3b946293aee31ce620c6c14f01f79582d4b162ccd3aad92c32d01088c3a72e2a9bc80471fcce8c15ad4a106f1247d4994e121a1a3ca590f37d009fa5c83de26a0dd79a8b365bcbd86cfcbf918bd5fd27863d45cc6611a327f81d1fd0770e93f9fd8a2023973fc9037de3474ef5ca128131d6bc9f11363eca7217de717b1ce2809d9376c463dbd622ddc8868c2a2cfcaa91def734035aa26b2bd4ffeb85f123b5809139458359d8803334fe69562783bb34039d60602d1074284e0da752e07701e1a557012626e46966a7e8cf245c3818a9757d86a4498bf57c16611e0300be6848b83530a85dc99525fb963869116aa6d023c8c3457348ea1d222ab365d9327eb8c83543bb47d74f2b8ad920b2c0c360a052286cc9577f6d5d69f48ea1e0179320f785314f4e39105c5b205c085d8d9f7eb766af5153ee66c5042c04b73ae42394c9df08551ffdb49605d490315c005acb616ecfaed8a2bd6eec64c34c0d848ac27f5481512a24c3ffc410e91dfe08f97086ab9a10da850f47ecad52bbc725d1de222c5295acae58cd7806c9d7b83308ad04d514a366375f6d3763c7c976a24d16230c7fa200b1512172e49370f6cc4467f7d877e2132f2816e652a00c6ea7368fb6116337f257dfa34567f84e8b3508a9c5f480bdb51101ca06bb924923f6fb8e3f989de834d917f68a218ba6a9d7c953b589d55ba20404b03b421c97877135e6aca81ce5326d45fd8634f0234156f596710dc26a1692b7a3bd053a0ff157375a7f6c19e154a1bbab79e1a12711fc8c17f3ac3d4d42ed2603c89be5d398efdb0372cb463409371df1108b01748ef8cc1d922c620e7797c641ab5b3e3362ccc6785040b9ddd8db3c8ff4cf276c3fe7565fca28fb345f4759dc96ca36c917156383dde822698358b36f1345662fd71f5d59497bc5f9d48092adb46beb2f1966e0231dd5c0ee3bb63d200ba1b3648a1fa5055e9671fcf88bdd425b605ad31d57950f336937ac797e5f26f2b0a4f4c011618dcf309ff16b2b65d0a3c09e791221d6ea9d67c5cd9c51ab18d0e060cb307da65755e88f658f83583d53b68f2bbbfe49aeab5e8fb2fd4d249b3d1a9d4b1e685ee60148bb99f60e02d7915a56b2e41c40a2426c14aed7dfc43e89db360e355d4f73d9194ca07b3ed4db4f3ce57f892edbca316547a7a429fc868cb5cdcd2f5e3f3bb11aa8e1aa41ffff53f8b3be0ef13400d1f1b24b9b57929a53efe8cbcc85c57d47ce35afff10abb52cef404b83086901cccbbc7f58a862b3f45768e75cb8ca70f0b0478ea1ebf2e8be3cabe174ed1b78b4c1cb3701fbc7f4baeb0875ed8707d2d5480e3f7327a5d37dc23c38cf2de8f8eeadf5b82aa6f32e60049c8cea888a9e0d2c65a0f4ee6214e4d2214354f571b80737165c996cfae5a0e12c39f2de2c9c45b1ebea1ff778e568d611bae5b52f0c2cb3aa9c9e5fd3df8ff719bbfbca77ea0727a4640778120c88b1a5a9826a1e67230d5da1c3686a0357acca70932e59a0587661e0bb9793100c956e42575a1761038e0f1d6be4eaac918013468113649ea9b014764c9c44a57645d190870b2ef41a688c10cdfa007981017e26831a8b1657b98021f6d3bcc4a951714267e06d950799a1b56fa0360209d935610b1673efb86a76890922045115f98aba5551f445299db34709b51690692b1d669e2be6353489f2c8dbc8ee2673cbd0d804c63faa26aba5d3935d5453def6e31b50e19e07867baceeb0c513cc3c14670a9948c9261fa7d31d5afd51dc2617356a7a84c845238435638253a114019dc4eed1cd50c5854233f88e6add56b7cf8c468b78682568a73da71cf9defabd44eca590adf3e064bb961edae33e058b59cea845986ee3a4aea17edede230c82a4cf25789c40380e88556c4d3236194e95876a6b56924dd2257a8bbe22411d810c716e710cbc39d0f38f1d8e88dd666dbf322e3b2309d05a45d316e1d057859d4e804bdc26f45f13d7fdabd382cd2bc637073246b4e196076955677eb968d9558f663fb5a446f4e83d820a99f59d415a0a5361b0190170ce56060173af1c2edeaea6b842e9dfad9a8899ebd1f6f079440a89a7f31f607ef854bcb3862df80da6f4b04e2dd24d0b7d51f02d0027ec72a43cb91dd531aa78054bbd0633b3e4330d48dc73b69c23049ba1a55682e98a85f56fed6f19bd306bb020c14f43ac1ebf80e2860dcac1feafc0af1dd44af99615ae4461d236b6d94571143b837fd06dac2a299220a663e5aa086f327f7c37d729ea0e8fcc9a6ded9e598134636557f645c6401337520c98d740fb26d365973a52087a34c6f17cb9dca2de0ca0f1c1d360553e4897b3ec31eded30a3f27745c5a6f804574b30c9ed0587cba466971f4b33ee2abfc93eee063bf0a1f091f7f65d5abf43bf5c250ea12697e5bca3085c269afaf3d948a29df2352af17de3c8a28945f14721a1509b4125c8c82bdefad0d0e4a9e9b8a842e53e6e85f4b7808856e94c1784333b15a67deff8557da8719c5bde3272963528ce4334685716dd7696e104428f9cd36c1750cd722e14064da29e31512a852801d426cd466382412cdd855d0ffa75fc0d969abed728c81686a9755d62a7f52f1569358e511617f974c524625427d21840b79fcb70f256d2249e971dec7a1da3806a36e34afbe4a48d197ec53794e98c36bbc469e8f1ac2ba78d0a13b106585671e9dc329480b8256bf34b5c4b786d27031bcdcceaf384b4ffa3c734e3d0967d4fe3e178ed745be74cf30164c56b28fc59e7673ef3a6c9f14d9fc35a006e81da3e3462c9458fc803e9b49930fb435bdc7f438c0b9f851dfe4d36added8463072281464353a7cd756238ea40cbeac2495c7685ccfbe94962ac4d98557459d9c7a6f62ddacc2f551d4c56a7b029ad4a4afadf1e99d348161ca9cf2f48d6d47cdb31f54725bfe27574ece9d8a38750ab0946b994402fa03e3cecafff851abe8859fdfd00ac28e55dd5682d960efcdf72f4437d7b30e7ecf2e759ebf305a948404115a7fc325b8cf464c99477d7c3e5e66bcb80789aa214c9609677347266adf0349e723a4d278026d07b4ba3f6bb8d8b12458d7896b700b2a42dfcb99fba20113c794621dfebf3e82ec623a23d1067f05113937975b153d320dae830191456c20e604ad0402a2b0b54b886bb88f4be56b646f2dd79488a2e0e32671ab00c606aa5c7a6a08871e1ad02f24c98276944745788bbaacce205175f178da1b9e1a0143773ee4dd3edfd05fd85aa9ae7eb54d44bdd332a8e3994bc76765da59dbea0f0d86b48f710b7aa8dd561fddddfdadddf08a169307886fc72a0da11c5b5aa3b7d310b3660744dcc543b70952e135be4faee9357eda1a5fe2a9e35bb41d698e3cf3dd4e869c1b14a6ab10f8ee81f424444bfe671ac2357ff31ffa51d543b1687e6e2b9b40bab92972b66806d3895ae5512e3e7cf43e2d003e862b9caf9ea7b78a75783c13104f09ff439c4f4690245a4d8fc84a65b6d4f8c165bae740b37eca6dbab289e61bddb9fdd6635916d7a0e2909b4a6e223251db49edc0c229023e98e4d934ea2fde813a4d6be7ea13922469ffd6952d1bc111c8bfee19d8e7c4f4e5f27fecd90044a6a0fff1c42d1f8d4dd26600ac306019abfb3847ace6a29d00bbed5ac559e6409ee2d829e5e40fc756719241db1d1c6799e457dafda613e31d170ba340e835c01df16601a8ffb2746d191438acfdf2fbf8fefa02ceafb0c89f59fb03d2eab7d1fafaf4dfce4de41c849b680df4270e093f2f48c838a2aa97c488db72eb10c79836d72405adf627954fad550d6791f5283e8e472785b3fc6605e8ef81fe941c78588f30632b6e829f450e67e7f16ca9339f1205b7793e010b319e0e9d20b2832cc154a2b77fd01b7c8e102435c8e759785c8dcd485f57f9d3e43b06c59a05db9becd485120201481cc4a68e1f1280fa21a92b18fae2a226eb9520af3162c12ac4c01dbb8cf8e52f606c6aac0c1b81ab58fb5e34a908aecd1e85323aa5e6691d918125f80c5ce555e4932e98be851f69770b30c08489e77606700e7a2b30df031f7ff07cb4aeb62403a9c3d8e84062fb9ff55d978a09d16319bf39f3b46df5b1fa6cf64d8a9fb701b7d6693620010a5f77a4fc32b2ceaaae2d696c1c3aa167ddc187b9fde2e882a9a800aa3ff703e20c29a059e283339fc2c46128955ab357954eccbe695a6cdcd6a03b6299acf081ea4b8513ceef0f960754c47fe05c2010c976b7af18cfabf5e962a0fc433542d4c3c6211308709da96ea36a8d355a02ac626f6a77c9b7ab528042237561359bcf4d3e8b540975dd00512bdb039b7530aa064adfc07073c99927c7397b34b83611362567041fb103d8b3ff470d8a1909b48e677149897944c1651decc0cfe7f58dd404fc0653f065c282f320191afa71cea824894979ccf5e8ce8021baf4502336a83e8625626cee59faf63297691382bae74a516bd5ecd56695eddade454a548cbca01213c61e1276f571bf318546dd321f27e5e8ea8da034cc5c08af256e0592cfba419e878677</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">猜一猜？</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>6.s081</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Llama_factory部署踩坑之旅</title>
    <link href="/2024/11/27/Llama-factory%E9%83%A8%E7%BD%B2%E8%B8%A9%E5%9D%91%E4%B9%8B%E6%97%85/"/>
    <url>/2024/11/27/Llama-factory%E9%83%A8%E7%BD%B2%E8%B8%A9%E5%9D%91%E4%B9%8B%E6%97%85/</url>
    
    <content type="html"><![CDATA[<p>记录一个很巧的报错，说来也巧，2024.11.18和同门在新机器上部署代码跑模型，早上在我工位电脑远程成功跑起模型，由于工作需要先在我电脑终止，下午在同门笔记本远程连接后同样的conda环境和路径命令跑不了了。重新创建conda环境拉取代码后一直报一个typo模块缺失的错，手动安装并永久添加到系统环境也无法解决，但是在吃饭的两个小时时间段有人提了一模一样的issue,第一反应是问同门是否是他提的</p><h2 id="No-module-named-‘tyro’"><a href="#No-module-named-‘tyro’" class="headerlink" title="No module named ‘tyro’"></a>No module named ‘tyro’</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby">(llama_factory) liujiayao_20240823_91<span class="hljs-variable">@dase314cxl</span><span class="hljs-symbol">:~/LLaMA-Factory-main</span><span class="hljs-variable">$ </span>python -c <span class="hljs-string">&quot;import tyro; print(tyro.__version__)&quot;</span><br><span class="hljs-title class_">Traceback</span> (most recent call last):<br>  <span class="hljs-title class_">File</span> <span class="hljs-string">&quot;&lt;string&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;<br><span class="hljs-title class_">ModuleNotFoundError</span>: <span class="hljs-title class_">No</span> <span class="hljs-keyword">module</span> named <span class="hljs-string">&#x27;tyro&#x27;</span><br></code></pre></td></tr></table></figure><p>解决：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install tyro==<span class="hljs-number">0</span>.<span class="hljs-number">8</span>.<span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><p><a href="uri"></a><a href="https://github.com/hiyouga/LLaMA-Factory/issues/6060">https://github.com/hiyouga/LLaMA-Factory/issues/6060</a></p><h2 id="version-GLIBCXX-3-4-32’-not-found"><a href="#version-GLIBCXX-3-4-32’-not-found" class="headerlink" title="version GLIBCXX_3.4.32’ not found"></a>version GLIBCXX_3.4.32’ not found</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">[rank0]: ImportError: <span class="hljs-regexp">/home/</span>liujiayao_20240823_91<span class="hljs-regexp">/miniconda3/</span>envs<span class="hljs-regexp">/llama_factory/</span>bin<span class="hljs-regexp">/../</span>lib<span class="hljs-regexp">/libstdc++.so.6: version GLIBCXX_3.4.32&#x27; not found (required by /</span>home<span class="hljs-regexp">/liujiayao_20240823_91/</span>.cache<span class="hljs-regexp">/torch_extensions/</span>py310_cu124<span class="hljs-regexp">/cpu_adam/</span>cpu_adam.so)<br></code></pre></td></tr></table></figure><p>解决方案很多，因不想降低scipy的版最终通过在对应conda环境通过 conda install -c conda-forge gcc 来解决。<br><a href="uri"></a><a href="https://zhuanlan.zhihu.com/p/637165718?utm_medium=social&utm_psn=1842275695461552129&utm_source=wechat_session">https://zhuanlan.zhihu.com/p/637165718?utm_medium=social&amp;utm_psn=1842275695461552129&amp;utm_source=wechat_session</a><br>可能有用的教程：<br><a href="uri"></a><a href="https://stackoverflow.com/questions/76974555/glibcxx-3-4-32-not-found-error-at-runtime-gcc-13-2-0">https://stackoverflow.com/questions/76974555/glibcxx-3-4-32-not-found-error-at-runtime-gcc-13-2-0</a><br><a href="uri"></a><a href="https://zhuanlan.zhihu.com/p/685165815">https://zhuanlan.zhihu.com/p/685165815</a><br><a href="uri"></a><a href="https://zhuanlan.zhihu.com/p/142718039">https://zhuanlan.zhihu.com/p/142718039</a></p><h3 id="pip速度太慢"><a href="#pip速度太慢" class="headerlink" title="pip速度太慢"></a>pip速度太慢</h3><p>临时使用清华镜像</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">pip install 包名 -<span class="hljs-selector-tag">i</span> https:<span class="hljs-comment">//pypi.tuna.tsinghua.edu.cn/simple</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Llama_factory</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>deepspeed/runtime/engine.py</title>
    <link href="/2024/11/27/deepspeed-runtime-engine-py/"/>
    <url>/2024/11/27/deepspeed-runtime-engine-py/</url>
    
    <content type="html"><![CDATA[<h2 id="确定检查点保存的配置"><a href="#确定检查点保存的配置" class="headerlink" title="确定检查点保存的配置"></a>确定检查点保存的配置</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lasso">def _save_checkpoint(<span class="hljs-built_in">self</span>, save_dir, <span class="hljs-built_in">tag</span>, client_state=&#123;&#125;, exclude_frozen_parameters=<span class="hljs-literal">False</span>):<br><br>       save_path = <span class="hljs-built_in">self</span>._get_ckpt_name(save_dir, <span class="hljs-built_in">tag</span>)<br><br>       zero_optimizer_state = <span class="hljs-built_in">self</span>.zero_optimization() <span class="hljs-literal">or</span> <span class="hljs-built_in">self</span>.bfloat16_enabled()<br><br>       save_frozen_param = <span class="hljs-built_in">self</span>.zero_optimization_partition_gradients() <span class="hljs-literal">and</span> <span class="hljs-literal">not</span> exclude_frozen_parameters<br><br></code></pre></td></tr></table></figure><ul><li>**save_path &#x3D; self._get_ckpt_name(save_dir, tag)**根据save_dir和tag生成完整的检查点保存路径。</li><li>**zero_optimizer_state &#x3D; self.zero_optimization() or self.bfloat16_enabled()**若启用 Zero Optimization 或 bfloat16，则需要保存优化器状态。</li><li><strong>save_frozen_param:</strong> 若启用 Zero Optimization 的梯度分区 且未排除冻结参数，则需要保存冻结参数。</li></ul><h2 id="收集模型的当前状态"><a href="#收集模型的当前状态" class="headerlink" title="收集模型的当前状态"></a>收集模型的当前状态</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-variable language_">self</span>._curr_ckpt_path = os.path.join(save_dir, tag)<br>      module = <span class="hljs-variable language_">self</span>.module_state_dict(exclude_frozen_parameters=exclude_frozen_parameters)<br>      <span class="hljs-variable language_">self</span>._curr_ckpt_path = <span class="hljs-literal">None</span><br>      state = <span class="hljs-built_in">dict</span>(module=module,<br>                   buffer_names=<span class="hljs-variable language_">self</span>._get_buffer_names(),<br>                   optimizer=<span class="hljs-variable language_">self</span>.optimizer.state_dict() <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.optimizer <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> zero_optimizer_state <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>,<br>                   param_shapes=<span class="hljs-variable language_">self</span>._get_zero_param_shapes() <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.optimizer <span class="hljs-keyword">and</span> zero_optimizer_state <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>,<br>                   frozen_param_shapes=<span class="hljs-variable language_">self</span>._get_zero_frozen_param_attributes(<span class="hljs-variable language_">self</span>._get_param_shape_func)<br>                   <span class="hljs-keyword">if</span> save_frozen_param <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>,<br>                   shared_params=<span class="hljs-variable language_">self</span>._get_shared_params() <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.optimizer <span class="hljs-keyword">and</span> zero_optimizer_state <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>,<br>                   frozen_param_fragments=<span class="hljs-variable language_">self</span>._get_zero_frozen_param_attributes(<span class="hljs-variable language_">self</span>._get_param_fragment_func)<br>                   <span class="hljs-keyword">if</span> save_frozen_param <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>,<br>                   lr_scheduler=<span class="hljs-variable language_">self</span>.lr_scheduler.state_dict() <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.lr_scheduler <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>,<br>                   data_sampler=<span class="hljs-variable language_">self</span>.training_dataloader.data_sampler.state_dict() <span class="hljs-keyword">if</span><br>                   (<span class="hljs-variable language_">self</span>.training_dataloader <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.curriculum_learning_enabled()) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>,<br>                   random_ltd=<span class="hljs-variable language_">self</span>.random_ltd_scheduler.state_dict() <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.random_ltd_enabled() <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>,<br>                   sparse_tensor_module_names=<span class="hljs-variable language_">self</span>.sparse_tensor_module_names,<br>                   skipped_steps=<span class="hljs-variable language_">self</span>.skipped_steps,<br>                   global_steps=<span class="hljs-variable language_">self</span>.global_steps,<br>                   global_samples=<span class="hljs-variable language_">self</span>.global_samples,<br>                   dp_world_size=<span class="hljs-variable language_">self</span>.seq_dp_world_size,<br>                   mp_world_size=<span class="hljs-variable language_">self</span>.mp_world_size,<br>                   ds_config=<span class="hljs-variable language_">self</span>.config,<br>                   ds_version=version)<br>      state.update(client_state)<br></code></pre></td></tr></table></figure><p>在使用 Pipeline Parallelism（流水线并行） 的训练模式时，<br>默认行为被重写，导致直接调用 module_state_dict() 返回 None，因为在流水线并行训练模式下，各个模块可能并没有直接获取到完整的状态数据。在调用 module_state_dict() 之前，临时设置一个保存路径变量 self._curr_ckpt_path。<br>PipelineEngine 的 module_state_dict() 实现会检查 <strong>self._curr_ckpt_path</strong> 是否存在，并利用它作为保存路径。<br>在完成 module_state_dict() 的调用之后，将 self._curr_ckpt_path 重置为 None，以免影响其他模块的逻辑。</p><ul><li>**self._curr_ckpt_path &#x3D; os.path.join(save_dir, tag)**将检查点保存路径设置为 save_dir 和 tag 的组合路径。 这是为了解决流水线并行模式下 module_state_dict() 依赖 self._curr_ckpt_path 的问题，确保其能够正确返回模型状态字典。</li><li><strong>module &#x3D; self.module_state_dict</strong>(exclude_frozen_parameters&#x3D;exclude_frozen_parameters)调用 module_state_dict: 获取模型的状态字典。参数 exclude_frozen_parameters 用于指定是否排除冻结参数（例如固定不更新的权重）。</li><li><strong>self._curr_ckpt_path &#x3D; None</strong> 将 self._curr_ckpt_path 重置为 None，恢复初始状态。</li><li>**state &#x3D; dict()**构造一个字典 state，保存与模型和训练相关的各种状态信息：<br><strong>module</strong>: 模型的状态字典，由 module_state_dict 提供。<br>buffer_names: 模型中所有 buffer 的名称，调用 _get_buffer_names() 获取。<br><strong>optimizer</strong>: 优化器状态，通过 self.optimizer.state_dict() 提取。仅在启用了优化器且不使用 zero_optimizer_state 时保存。<br><strong>param_shapes</strong>: 参数形状。仅在启用 zero_optimizer_state 时保存，调用 _get_zero_param_shapes()。<br><strong>frozen_param_shapes</strong>: 冻结参数的形状。仅在启用 save_frozen_param 时保存，调用 _get_zero_frozen_param_attributes(self._get_param_shape_func)。<br><strong>shared_params</strong>: 共享参数信息，调用 _get_shared_params()。<br><strong>frozen_param_fragments</strong>: 冻结参数片段。类似于冻结参数形状，但数据片段级别，调用 _get_zero_frozen_param_attributes(self._get_param_fragment_func)。<br><strong>lr_scheduler</strong>: 学习率调度器状态字典，由 self.lr_scheduler.state_dict() 提供。<br><strong>data_sampler</strong>: 数据采样器状态字典。如果启用了课程学习（curriculum_learning_enabled()）并且有训练数据加载器，则调用 self.training_dataloader.data_sampler.state_dict()。<br><strong>random_ltd</strong>: 随机 LTD 调度器状态字典（用于随机剪枝或模型压缩），通过 <strong>self.random_ltd_scheduler.state_dict()</strong> 获取。<br><strong>sparse_tensor_module_names</strong>: 稀疏张量模块的名称。<br><strong>skipped_steps</strong>: 当前训练中跳过的步骤数。<br><strong>global_steps</strong>: 全局训练步数。<br><strong>global_samples</strong>: 全局训练样本数。<br><strong>dp_world_size</strong>: 数据并行的全局工作大小。<br><strong>mp_world_size</strong>: 模型并行的全局工作大小。<br><strong>ds_config</strong>: DeepSpeed 的配置。<br><strong>ds_version</strong>: DeepSpeed 的版本信息。</li><li>**state.update(client_state)**将外部传入的 client_state 添加到 state 字典中，扩展其内容。</li></ul><h2 id="处理冻结参数形状"><a href="#处理冻结参数形状" class="headerlink" title="处理冻结参数形状"></a>处理冻结参数形状</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">frozen_param_shapes = state<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;frozen_param_shapes&#x27;</span>]</span><br>       frozen_param_shapes_str = <span class="hljs-built_in">str</span>(frozen_param_shapes)<br>       frozen_param_shapes_dict = &#123;key: <span class="hljs-built_in">list</span>(value) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(value, torch.Size) <span class="hljs-keyword">else</span> value<span class="hljs-selector-class">.tolist</span>() <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> frozen_param_shapes<span class="hljs-selector-class">.items</span>()&#125;<br><br></code></pre></td></tr></table></figure><ul><li><strong>frozen_param_shapes &#x3D; state[‘frozen_param_shapes’]</strong><br>**frozen_param_shapes_str &#x3D; str(frozen_param_shapes)**提取冻结参数的形状信息，并转换为字符串格式以便后续处理。</li><li><strong>frozen_param_shapes_dict</strong> &#x3D; {<br>  key: list(value) if isinstance(value, torch.Size) else value.tolist()<br>  for key, value in frozen_param_shapes.items()<br>}遍历字典中的每个键值对将 frozen_param_shapes 中的内容格式化为适合保存为 JSON 文件的形式。<br>如果是 <strong>torch.Size</strong>类型(torch.Size 是 PyTorch 中表示张量形状的类，但它是不可直接序列化为 JSON 的)调用 <strong>list(value)</strong> 将其转换为 Python 的列表（如 (3, 4) 转为 [3, 4]）,张量（torch.Tensor）也不可直接序列化为 JSON。调用 <strong>.tolist()</strong> 将张量内容转换为 Python 的列表。<br>例如，形如 torch.tensor([1, 2, 3]) 会转换为 [1, 2, 3]。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>确定检查点保存的配置</strong>：包括路径、状态和所需部分。<br>确定保存路径：使用 self._get_ckpt_name(save_dir, tag) 方法生成保存路径 save_path。<br>确定保存状态：zero_optimizer_state：是否保存优化器的非零状态（由 Zero Optimization 和 bfloat16 支持决定）。save_frozen_param：是否保存冻结参数状态（需要 Zero Optimization 的分区梯度功能并且没有排除冻结参数）。</li><li><strong>收集模型的当前状态</strong>：构建保存字典（state）<br>保存模块状态：通过设置 self._curr_ckpt_path，解决 Pipeline Parallelism 中 module_state_dict() 的路径依赖问题，获取模块状态。<br>构建状态字典 (**state)**：包含模型和训练相关的多种状态：<br>模型权重（module），优化器状态（optimizer），参数形状（param_shapes）<br>冻结参数形状及片段（frozen_param_shapes 和 frozen_param_fragments），学习率调度器状态（lr_scheduler），数据采样器状态（data_sampler）<br>随机梯度裁剪（random_ltd），其它全局状态（例如步数、样本数、配置等）</li><li><strong>处理冻结参数形状</strong>：将 frozen_param_shapes 转换为字典格式（从 torch.Size 转为列表）。</li><li><strong>完整保存检查点</strong>：用于模型后续的加载和恢复。</li></ul><h2 id="frozen-param-shapes"><a href="#frozen-param-shapes" class="headerlink" title="frozen_param_shapes"></a>frozen_param_shapes</h2><p><strong>目的</strong>:遍历模型的参数，检查哪些参数是冻结的（即不需要梯度更新的），并统计它们分布在 CPU 和 GPU 上的数量，同时通过给定的 attr_func 获取每个冻结参数的属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_zero_frozen_param_attributes</span>(<span class="hljs-params">self, attr_func</span>):<br>        frozen_param_fragments = OrderedDict()<br>        cpu = <span class="hljs-number">0</span><br>        gpu = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.module.parameters():<br>            <span class="hljs-keyword">if</span> param.requires_grad:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> param <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.param_names:<br>                <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&quot;failed to find frozen <span class="hljs-subst">&#123;param&#125;</span> in named params&quot;</span>)<br>            name = <span class="hljs-variable language_">self</span>.param_names[param]<br>            <span class="hljs-comment">#pdb.set_trace()</span><br>            <br>            <span class="hljs-keyword">if</span> param.ds_tensor.device == torch.device(<span class="hljs-string">&#x27;cpu&#x27;</span>):<br>                cpu+=<span class="hljs-number">1</span><br>               <span class="hljs-comment"># print(f&quot;Device of param &#123;param&#125;: &#123;param.ds_tensor.device&#125;&quot;)</span><br>            <span class="hljs-keyword">else</span> :<br>                pdb.set_trace()<br>                gpu+=<span class="hljs-number">1</span><br>                <span class="hljs-comment">#print(param.ds_tensor.device)</span><br><br>            frozen_param_fragments[name] = attr_func(param)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;cpu次数: <span class="hljs-subst">&#123;cpu&#125;</span>&quot;</span>) <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;gpu次数: <span class="hljs-subst">&#123;gpu&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> frozen_param_fragments<br></code></pre></td></tr></table></figure><ul><li><strong>frozen_param_fragments</strong>：存储冻结参数及其通过 attr_func 提取的属性，使用 OrderedDict 按插入顺序存储键值对。</li><li><strong>for param in self.module.parameters()</strong>:遍历模型中所有的参数。</li><li><strong>if param.requires_grad:continue</strong> 这里param.requires_grad&#x3D;True 表示该参数是可训练的，即需要进行梯度更新，因此跳过这些参数，只处理冻结的参数（requires_grad&#x3D;False）。</li><li><strong>if param not in self.param_names:</strong> param 必须在 self.param_names 中有对应的名称。如果没有找到，抛出一个 ValueError 错误，表示无法找到该参数的名称。</li><li><strong>name &#x3D; self.param_names[param]</strong>:获取冻结参数的名称，存储在 name 变量中。这个名称通常用于在 frozen_param_fragments 字典中标识每个参数。</li><li>if param.ds_tensor.device &#x3D;&#x3D; torch.device(‘cpu’):<br>  cpu +&#x3D; 1<br>else:<br>  gpu +&#x3D; 1区分 CPU 和 GPU 中的冻结参数，并分别统计它们的数量。</li><li>**frozen_param_fragments[name] &#x3D; attr_func(param)**：对每个冻结参数，调用 attr_func(param) 来获取其相关属性，并将该属性存储在 frozen_param_fragments 字典中。字典的键是参数的名称 name，值是通过 attr_func 获取的属性。</li></ul><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ol><li><strong>初始化数据结构</strong>：创建存储冻结参数的字典 frozen_param_fragments 和设备计数器 cpu、gpu。</li><li><strong>遍历模型参数</strong>：遍历模型中所有的参数，筛选出冻结参数。检查参数名称：确保冻结参数在 self.param_names 中有对应的名称。</li><li><strong>统计设备信息</strong>：判断冻结参数所在的设备，并统计 CPU 和 GPU 上冻结参数的数量。提取属性：通过调用 attr_func 提取冻结参数的属性。</li><li><strong>打印统计信息</strong>：打印 CPU 和 GPU 上冻结参数的数量。</li><li><strong>返回结果</strong>：返回包含冻结参数名称和属性的字典。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Llama_factory</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pdb启动微调</title>
    <link href="/2024/11/27/pdb%E5%90%AF%E5%8A%A8%E5%BE%AE%E8%B0%83-1/"/>
    <url>/2024/11/27/pdb%E5%90%AF%E5%8A%A8%E5%BE%AE%E8%B0%83-1/</url>
    
    <content type="html"><![CDATA[<h2 id="245机器上启动pdb微调："><a href="#245机器上启动pdb微调：" class="headerlink" title="245机器上启动pdb微调："></a>245机器上启动pdb微调：</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">conda activate llama_factory<br>cd Downloads/LLaMA-Factory/<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">FORCE_TORCHRUN</span>=1<br></code></pre></td></tr></table></figure><ul><li><strong>pdb：</strong></li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">CUDA_VISIBLE_DEVICES=1 python3 -m pdb $<span class="hljs-params">(which llamafactory-cli)</span> train     <span class="hljs-params">--stage</span> sft     <span class="hljs-params">--do_train</span>     <span class="hljs-params">--model_name_or_path</span> <span class="hljs-string">/home/dell/sdb/.cache/Qwen2-0___5B-Instruct</span>     <span class="hljs-params">--dataset</span> identity     <span class="hljs-params">--dataset_dir</span> <span class="hljs-string">./data</span>     <span class="hljs-params">--template</span> qwen     <span class="hljs-params">--finetuning_type</span> freeze     <span class="hljs-params">--output_dir</span> <span class="hljs-string">/home/dell/sdb/saves/Qwen2-0___5B-Instruct/freeze/sft</span>     <span class="hljs-params">--overwrite_cache</span>     <span class="hljs-params">--overwrite_output_dir</span>     <span class="hljs-params">--cutoff_len</span> 1024     <span class="hljs-params">--preprocessing_num_workers</span> 16     <span class="hljs-params">--per_device_train_batch_size</span> 2     <span class="hljs-params">--per_device_eval_batch_size</span> 1     <span class="hljs-params">--gradient_accumulation_steps</span> 8     <span class="hljs-params">--lr_scheduler_type</span> cosine     <span class="hljs-params">--logging_steps</span> 50     <span class="hljs-params">--warmup_steps</span> 20     <span class="hljs-params">--save_steps</span> 100     <span class="hljs-params">--eval_steps</span> 50     <span class="hljs-params">--evaluation_strategy</span> steps     <span class="hljs-params">--load_best_model_at_end</span>     <span class="hljs-params">--learning_rate</span> 5e-5     <span class="hljs-params">--num_train_epochs</span> 5.0     <span class="hljs-params">--max_samples</span> 1000     <span class="hljs-params">--val_size</span> 0.1     <span class="hljs-params">--plot_loss</span>     <span class="hljs-params">--fp16</span>     <span class="hljs-params">--deepspeed</span> examples/deepspeed/ds_z3_offload_config.json<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Llama_factory</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>检查点存储流程</title>
    <link href="/2024/11/27/%E6%A3%80%E6%9F%A5%E7%82%B9%E5%AD%98%E5%82%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/11/27/%E6%A3%80%E6%9F%A5%E7%82%B9%E5%AD%98%E5%82%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="保存checkpoint日志解析"><a href="#保存checkpoint日志解析" class="headerlink" title="保存checkpoint日志解析"></a>保存checkpoint日志解析</h1><ul><li><strong>保存检查点开始</strong><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">2024</span><span class="hljs-number">-11</span><span class="hljs-number">-21</span> <span class="hljs-number">10</span>:<span class="hljs-number">18</span>:<span class="hljs-number">54</span>,<span class="hljs-number">402</span> &gt;&gt; Saving model <span class="hljs-keyword">checkpoint</span> <span class="hljs-keyword">to</span> /home/dell/sdb/saves/Qwen2<span class="hljs-number">-0</span>___5B-Instruct/<span class="hljs-keyword">freeze</span>/sft/<span class="hljs-keyword">checkpoint</span><span class="hljs-number">-25</span><br></code></pre></td></tr></table></figure>模型检查点将被保存到指定路径 &#x2F;home&#x2F;dell&#x2F;sdb&#x2F;saves&#x2F;Qwen2-0___5B-Instruct&#x2F;freeze&#x2F;sft&#x2F;checkpoint-25，代表训练中的第25次迭代或某个训练进度标志。</li><li>保存配置文件<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-keyword">INFO</span>|configuration_utils.py:<span class="hljs-number">472</span>] <span class="hljs-number">2024</span><span class="hljs-number">-11</span><span class="hljs-number">-21</span> <span class="hljs-number">10</span>:<span class="hljs-number">18</span>:<span class="hljs-number">54</span>,<span class="hljs-number">406</span> &gt;&gt; <span class="hljs-keyword">Configuration</span> saved <span class="hljs-keyword">in</span> /home/dell/sdb/saves/Qwen2<span class="hljs-number">-0</span>___5B-Instruct/<span class="hljs-keyword">freeze</span>/sft/<span class="hljs-keyword">checkpoint</span><span class="hljs-number">-25</span>/config.json<br>[<span class="hljs-keyword">INFO</span>|configuration_utils.py:<span class="hljs-number">807</span>] <span class="hljs-number">2024</span><span class="hljs-number">-11</span><span class="hljs-number">-21</span> <span class="hljs-number">10</span>:<span class="hljs-number">18</span>:<span class="hljs-number">54</span>,<span class="hljs-number">406</span> &gt;&gt; <span class="hljs-keyword">Configuration</span> saved <span class="hljs-keyword">in</span> /home/dell/sdb/saves/Qwen2<span class="hljs-number">-0</span>___5B-Instruct/<span class="hljs-keyword">freeze</span>/sft/<span class="hljs-keyword">checkpoint</span><span class="hljs-number">-25</span>/generation_config.json<br></code></pre></td></tr></table></figure>config.json 和 generation_config.json 分别保存模型的基础配置和生成参数配置，确保模型加载时可以正确重现训练环境。</li><li>保存模型权重文件</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-keyword">INFO</span>|modeling_utils.py:<span class="hljs-number">2766</span>] <span class="hljs-number">2024</span><span class="hljs-number">-11</span><span class="hljs-number">-21</span> <span class="hljs-number">10</span>:<span class="hljs-number">19</span>:<span class="hljs-number">00</span>,<span class="hljs-number">213</span> &gt;&gt; Model weights saved <span class="hljs-keyword">in</span> /home/dell/sdb/saves/Qwen2<span class="hljs-number">-0</span>___5B-Instruct/<span class="hljs-keyword">freeze</span>/sft/<span class="hljs-keyword">checkpoint</span><span class="hljs-number">-25</span>/model.safetensors<br></code></pre></td></tr></table></figure><p>权重文件保存为 model.safetensors 格式。</p><ul><li>保存分词器文件</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-keyword">INFO</span>|tokenization_utils_base.py:<span class="hljs-number">2702</span>] <span class="hljs-number">2024</span><span class="hljs-number">-11</span><span class="hljs-number">-21</span> <span class="hljs-number">10</span>:<span class="hljs-number">19</span>:<span class="hljs-number">00</span>,<span class="hljs-number">214</span> &gt;&gt; tokenizer config file saved <span class="hljs-keyword">in</span> /home/dell/sdb/saves/Qwen2<span class="hljs-number">-0</span>___5B-Instruct/<span class="hljs-keyword">freeze</span>/sft/<span class="hljs-keyword">checkpoint</span><span class="hljs-number">-25</span>/tokenizer_config.json<br>[<span class="hljs-keyword">INFO</span>|tokenization_utils_base.py:<span class="hljs-number">2711</span>] <span class="hljs-number">2024</span><span class="hljs-number">-11</span><span class="hljs-number">-21</span> <span class="hljs-number">10</span>:<span class="hljs-number">19</span>:<span class="hljs-number">00</span>,<span class="hljs-number">214</span> &gt;&gt; Special tokens file saved <span class="hljs-keyword">in</span> /home/dell/sdb/saves/Qwen2<span class="hljs-number">-0</span>___5B-Instruct/<span class="hljs-keyword">freeze</span>/sft/<span class="hljs-keyword">checkpoint</span><span class="hljs-number">-25</span>/special_tokens_map.json<br></code></pre></td></tr></table></figure><p>tokenizer_config.json：分词器的配置信息。<br>special_tokens_map.json：保存特殊 token（如 pad_token、cls_token 等）的映射关系。</p><h2 id="保存-DeepSpeed-检查点"><a href="#保存-DeepSpeed-检查点" class="headerlink" title="保存 DeepSpeed 检查点"></a>保存 DeepSpeed 检查点</h2><ul><li>记录全局步骤的检查点信息</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-number">2024</span><span class="hljs-number">-11</span><span class="hljs-number">-21</span> <span class="hljs-number">10</span>:<span class="hljs-number">20</span>:<span class="hljs-number">31</span>,<span class="hljs-number">627</span>] [<span class="hljs-keyword">INFO</span>] [logging.py:<span class="hljs-number">96</span>:log_dist] [Rank <span class="hljs-number">0</span>] [Torch] <span class="hljs-keyword">Checkpoint</span> global_step25 <span class="hljs-keyword">is</span> about <span class="hljs-keyword">to</span> be saved!<br><br></code></pre></td></tr></table></figure><p>global_step25 代表训练到第 25 个全局步骤的状态。</p><ul><li>保存零冗余优化器的检查点文件<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-number">2024</span><span class="hljs-number">-11</span><span class="hljs-number">-21</span> <span class="hljs-number">10</span>:<span class="hljs-number">22</span>:<span class="hljs-number">33</span>,<span class="hljs-number">574</span>] [<span class="hljs-keyword">INFO</span>] [logging.py:<span class="hljs-number">96</span>:log_dist] [Rank <span class="hljs-number">0</span>] Saving model <span class="hljs-keyword">checkpoint</span>: /home/dell/sdb/saves/Qwen2<span class="hljs-number">-0</span>___5B-Instruct/<span class="hljs-keyword">freeze</span>/sft/<span class="hljs-keyword">checkpoint</span><span class="hljs-number">-25</span>/global_step25/zero_pp_rank_0_mp_rank_00_model_states.pt<br></code></pre></td></tr></table></figure>zero_pp_rank_0_mp_rank_00_model_states.pt：保存当前模型状态，用于零冗余优化（ZeRO）的分布式训练。</li></ul><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[<span class="hljs-number">2024</span><span class="hljs-number">-11</span><span class="hljs-number">-21</span> <span class="hljs-number">10</span>:<span class="hljs-number">22</span>:<span class="hljs-number">33</span>,<span class="hljs-number">575</span>] [<span class="hljs-symbol">INFO</span>] [torch_checkpoint_engine.py:<span class="hljs-number">21</span>:save] [<span class="hljs-symbol">Torch</span>] <span class="hljs-symbol">Saving</span> ...<br>[<span class="hljs-number">2024</span><span class="hljs-number">-11</span><span class="hljs-number">-21</span> <span class="hljs-number">10</span>:<span class="hljs-number">26</span>:<span class="hljs-number">56</span>,<span class="hljs-number">161</span>] [<span class="hljs-symbol">INFO</span>] [torch_checkpoint_engine.py:<span class="hljs-number">23</span>:save] [<span class="hljs-symbol">Torch</span>] <span class="hljs-symbol">Saved</span> ...<br></code></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[<span class="hljs-number">2024</span><span class="hljs-number">-11</span><span class="hljs-number">-21</span> <span class="hljs-number">10</span>:<span class="hljs-number">27</span>:<span class="hljs-number">11</span>,<span class="hljs-number">351</span>] [<span class="hljs-symbol">INFO</span>] [torch_checkpoint_engine.py:<span class="hljs-number">23</span>:save] [<span class="hljs-symbol">Torch</span>] <span class="hljs-symbol">Saved</span> .../zero_pp_rank_0_mp_rank_00_optim_states.pt.<br></code></pre></td></tr></table></figure><p>zero_pp_rank_0_mp_rank_00_optim_states.pt 保存优化器状态，保证恢复训练时可以正确加载优化器的参数。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[2024-11-21 10:27:11,369]</span> <span class="hljs-comment">[INFO]</span> <span class="hljs-comment">[engine.py:3589:_save_zero_checkpoint]</span> zero checkpoint saved ...<br><span class="hljs-comment">[2024-11-21 10:27:11,369]</span> <span class="hljs-comment">[INFO]</span> <span class="hljs-comment">[torch_checkpoint_engine.py:33:commit]</span> <span class="hljs-comment">[Torch]</span> Checkpoint global_step25 <span class="hljs-keyword">is</span> ready now!<br><br></code></pre></td></tr></table></figure><p>所有文件均保存完成，检查点 global_step25 可以正常使用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>DeepSpeed 和 PyTorch 结合使用，完整的检查点保存流程</strong>：</p><ol><li>模型参数（权重）</li><li>优化器状态</li><li>配置文件</li><li>特殊辅助文件（如冻结参数形状和分词器信息）</li></ol><h1 id="transformers-trainer-py"><a href="#transformers-trainer-py" class="headerlink" title="transformers&#x2F;trainer.py"></a>transformers&#x2F;trainer.py</h1><h2 id="核心逻辑"><a href="#核心逻辑" class="headerlink" title="核心逻辑"></a>核心逻辑</h2><p>在分布式训练中，多个进程通常会并行运行，为了避免重复保存检查点（例如由每个进程都保存一次），通常只有主进程（通常称为 rank 0 或“进程 0”）负责保存检查点。<br>如果该函数运行到了这一步，说明调用者已经确保此代码只会在进程 0 上执行。因此，无需在此处再次检查是否为主进程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_save</span>(<span class="hljs-params">self, output_dir: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span>, state_dict=<span class="hljs-literal">None</span></span>):<br>       output_dir = output_dir <span class="hljs-keyword">if</span> output_dir <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-variable language_">self</span>.args.output_dir<br>       os.makedirs(output_dir, exist_ok=<span class="hljs-literal">True</span>)<br>       logger.info(<span class="hljs-string">f&quot;Saving model checkpoint to <span class="hljs-subst">&#123;output_dir&#125;</span>&quot;</span>)<br>       <span class="hljs-comment"># 确定支持的模型类型</span><br>       supported_classes = (PreTrainedModel,) <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_peft_available() <span class="hljs-keyword">else</span> (PreTrainedModel, PeftModel)<br><br>       <span class="hljs-comment"># 模型不是支持的类型,state_dict：获取模型参数的状态字典，用于保存权重。</span><br>       <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-variable language_">self</span>.model, supported_classes):<br>           <span class="hljs-keyword">if</span> state_dict <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>               state_dict = <span class="hljs-variable language_">self</span>.model.state_dict()<br>       <span class="hljs-comment"># 如果通过 self.accelerator.unwrap_model 解包后的模型属于支持的类：调用 save_pretrained() 方法保存模型到 output_dir，并传入 state_dict 和 safe_serialization 参数。</span><br>           <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-variable language_">self</span>.accelerator.unwrap_model(<span class="hljs-variable language_">self</span>.model), supported_classes):<br>               <span class="hljs-variable language_">self</span>.accelerator.unwrap_model(<span class="hljs-variable language_">self</span>.model).save_pretrained(<br>                   output_dir, state_dict=state_dict, safe_serialization=<span class="hljs-variable language_">self</span>.args.save_safetensors<br>               )<br>            <span class="hljs-comment"># 如果解包后的模型仍然不属于支持的类：记录日志：只保存模型state_dict</span><br>           <span class="hljs-keyword">else</span>:<br>               logger.info(<span class="hljs-string">&quot;Trainer.model is not a `PreTrainedModel`, only saving its state dict.&quot;</span>)<br>               <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.args.save_safetensors:<br>                   safetensors.torch.save_file(<br>                       state_dict, os.path.join(output_dir, SAFE_WEIGHTS_NAME), metadata=&#123;<span class="hljs-string">&quot;format&quot;</span>: <span class="hljs-string">&quot;pt&quot;</span>&#125;<br>                   )<br>               <span class="hljs-keyword">else</span>:<br>                   torch.save(state_dict, os.path.join(output_dir, WEIGHTS_NAME))<br>       <span class="hljs-comment"># 如果 self.model 类型属于支持的类，直接调用 save_pretrained() 保存模型，包括 state_dict 和 safe_serialization 参数。</span><br>       <span class="hljs-keyword">else</span>:<br>           <span class="hljs-variable language_">self</span>.model.save_pretrained(<br>               output_dir, state_dict=state_dict, safe_serialization=<span class="hljs-variable language_">self</span>.args.save_safetensors<br>           )<br>       <span class="hljs-comment">#save_pretrained 是主函数，用于保存分词器的完整状态 </span><br>       <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.tokenizer <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>           <span class="hljs-variable language_">self</span>.tokenizer.save_pretrained(output_dir)<br><br>       <span class="hljs-comment"># 训练参数</span><br>       torch.save(<span class="hljs-variable language_">self</span>.args, os.path.join(output_dir, TRAINING_ARGS_NAME))<br></code></pre></td></tr></table></figure><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><strong>这段代码的功能是保存训练过程中生成的检查点，包括</strong>：</p><ul><li>模型权重state_dict：获取模型参数的状态字典，用于保存权重。</li><li>模型及其配置保存到指定的目录：self.model.save_pretrained(只有主进程才会保存模型)</li><li>分词器配置：self.tokenizer.save_pretrained(output_dir)，用于保存模型的函数，默认为 torch.save</li><li>训练参数：torch.save</li></ul><h2 id="save-pretrained核心逻辑"><a href="#save-pretrained核心逻辑" class="headerlink" title="save_pretrained核心逻辑"></a>save_pretrained核心逻辑</h2><p><strong>save_pretrained</strong> 函数的核心逻辑是将训练好的模型及其配置保存到指定的目录，方便后续通过 <strong>from_pretrained</strong> 方法重新加载。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 如果 self.model 类型属于支持的类，直接调用 save_pretrained() 保存模型，包括 state_dict 和 safe_serialization 参数。</span><br>        <span class="hljs-keyword">else</span>:<br>            self.model.save_pretrained(<br>                output_dir, <span class="hljs-attribute">state_dict</span>=state_dict, <span class="hljs-attribute">safe_serialization</span>=self.args.save_safetensors<br>            )<br></code></pre></td></tr></table></figure><h3 id="输入参数"><a href="#输入参数" class="headerlink" title="输入参数"></a>输入参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_pretrained</span>(<span class="hljs-params"></span><br><span class="hljs-params">        self,</span><br><span class="hljs-params">        save_directory: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, os.PathLike],</span><br><span class="hljs-params">        is_main_process: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>,</span><br><span class="hljs-params">        state_dict: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">dict</span>] = <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        <span class="hljs-comment"># 用于保存模型的函数，默认为 torch.save。</span></span><br><span class="hljs-params">        save_function: <span class="hljs-type">Callable</span> = torch.save,</span><br><span class="hljs-params">        push_to_hub: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,</span><br><span class="hljs-params">        <span class="hljs-comment"># 每个模型检查点的最大大小，超过该大小时将进行分片保存。</span></span><br><span class="hljs-params">        max_shard_size: <span class="hljs-type">Union</span>[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">str</span>] = <span class="hljs-string">&quot;5GB&quot;</span>,</span><br><span class="hljs-params">        <span class="hljs-comment"># 使用 safetensors进行序列化</span></span><br><span class="hljs-params">        safe_serialization: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>,</span><br><span class="hljs-params">        variant: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        token: <span class="hljs-type">Optional</span>[<span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">bool</span>]] = <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        <span class="hljs-comment"># 是否将适配器权重（如果存在）以兼容 PEFT 库的格式保存</span></span><br><span class="hljs-params">        save_peft_format: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>,</span><br><span class="hljs-params">        **kwargs,</span><br><span class="hljs-params">    </span>):<br></code></pre></td></tr></table></figure><h3 id="offload-的模块进行特殊处理"><a href="#offload-的模块进行特殊处理" class="headerlink" title="offload 的模块进行特殊处理"></a>offload 的模块进行特殊处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># for offloaded modules</span><br>       module_map = &#123;&#125;<br><br>       <span class="hljs-comment"># Save the model</span><br>       <span class="hljs-keyword">if</span> state_dict <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>           <span class="hljs-comment"># if any model parameters are offloaded, make module map</span><br>           <span class="hljs-keyword">if</span> (<br>               <span class="hljs-comment"># 检查模型是否有设备映射属性</span><br>               <span class="hljs-built_in">hasattr</span>(<span class="hljs-variable language_">self</span>, <span class="hljs-string">&quot;hf_device_map&quot;</span>) <br>               <span class="hljs-comment"># 确认设备映射到多个设备</span><br>               <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(<span class="hljs-variable language_">self</span>.hf_device_map.values())) &gt; <span class="hljs-number">1</span><br>               <span class="hljs-comment"># 判断是否有部分模型参数被 offload（存储到 CPU 或磁盘）。</span><br>               <span class="hljs-keyword">and</span> (<span class="hljs-string">&quot;cpu&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.hf_device_map.values() <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;disk&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.hf_device_map.values())<br>           ):<br>           <span class="hljs-comment"># 发出警告，提示用户 CPU 的空闲内存需要大于 shard_size（默认值为 5GB）。</span><br>               warnings.warn(<br>                   <span class="hljs-string">&quot;Attempting to save a model with offloaded modules. Ensure that unallocated cpu memory exceeds the `shard_size` (5GB default)&quot;</span><br>               )<br><br>               <span class="hljs-comment"># 遍历 model_to_save 的所有子模块。named_modules() 方法返回所有模块的名字和模块本身。准备为每个模块提取参数字典（state_dict）。</span><br>               <span class="hljs-keyword">for</span> name, module <span class="hljs-keyword">in</span> model_to_save.named_modules():<br>                   <span class="hljs-keyword">if</span> name == <span class="hljs-string">&quot;&quot;</span>:<br>                       <span class="hljs-keyword">continue</span><br>                   <span class="hljs-comment"># 获取当前模块的参数字典（state_dict）。</span><br>                   module_state_dict = module.state_dict()<br>                   <span class="hljs-comment"># 将模块名和参数名组合，记录到 module_map 中。为每个参数生成唯一的键名：模块名.参数名。在 module_map 中记录键名和模块的对应关系，用于后续加载这些参数。</span><br>                   <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> module_state_dict:<br>                       module_map[name + <span class="hljs-string">f&quot;.<span class="hljs-subst">&#123;key&#125;</span>&quot;</span>] = module<br><br>           <span class="hljs-comment"># 调用 model_to_save 的 state_dict() 方法生成完整的模型参数字典。</span><br>           state_dict = model_to_save.state_dict()<br></code></pre></td></tr></table></figure><p><strong>这部分代码的核心功能是为保存模型时支持 offload 的模块进行特殊处理</strong>：</p><ol><li>检查模型是否包含 offload 到 CPU 或磁盘的参数。</li><li>如果存在 offload 参数，创建 module_map，记录参数与模块的对应关系。</li><li>最后生成完整的 state_dict，用于保存模型。</li></ol><h3 id="分片保存"><a href="#分片保存" class="headerlink" title="分片保存"></a>分片保存</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># Save the model</span><br>       filename_to_tensors = state_dict_split.filename_to_tensors.items()<br>       if module_map:<br>           filename_to_tensors = logging.tqdm(filename_to_tensors, desc=<span class="hljs-string">&quot;Saving checkpoint shards&quot;</span>)<br>       for <span class="hljs-keyword">shard_file, </span>tensors in filename_to_tensors:<br>           <span class="hljs-keyword">shard </span>= &#123;tensor: state_dict[tensor] for tensor in tensors&#125;<br>           <span class="hljs-comment"># remake shard with onloaded parameters if necessary</span><br>           if module_map:<br>               if accelerate_version &lt; version.parse(<span class="hljs-string">&quot;0.31&quot;</span>):<br>                   raise ImportError(<br>                       f<span class="hljs-string">&quot;You need accelerate version to be greater or equal than 0.31 to save models with offloaded parameters. Detected version &#123;accelerate_version&#125;. &quot;</span><br>                       f<span class="hljs-string">&quot;Please upgrade accelerate with `pip install -U accelerate`&quot;</span><br>                   )<br>               <span class="hljs-comment"># init state_dict for this shard</span><br>               <span class="hljs-keyword">shard_state_dict </span>= &#123;name: <span class="hljs-string">&quot;&quot;</span> for name in <span class="hljs-keyword">shard&#125;</span><br><span class="hljs-keyword"></span>               for module_name in <span class="hljs-keyword">shard:</span><br><span class="hljs-keyword"></span>                   module = module_map[module_name]<br>                   <span class="hljs-comment"># update state dict with onloaded parameters</span><br>                   <span class="hljs-keyword">shard_state_dict </span>= get_state_dict_from_offload(module, module_name, <span class="hljs-keyword">shard_state_dict)</span><br><span class="hljs-keyword"></span><br>               <span class="hljs-comment"># assign shard to be the completed state dict</span><br>               <span class="hljs-keyword">shard </span>= <span class="hljs-keyword">shard_state_dict</span><br><span class="hljs-keyword"></span>               del <span class="hljs-keyword">shard_state_dict</span><br><span class="hljs-keyword"></span>               gc.collect()<br><br>           if safe_serialization:<br>               <span class="hljs-comment"># At some point we will need to deal better with save_function (used for TPU and other distributed</span><br>               <span class="hljs-comment"># joyfulness), but for now this enough.</span><br>               safe_save_file(<span class="hljs-keyword">shard, </span>os.path.<span class="hljs-keyword">join(save_directory, </span><span class="hljs-keyword">shard_file), </span>metadata=&#123;<span class="hljs-string">&quot;format&quot;</span>: <span class="hljs-string">&quot;pt&quot;</span>&#125;)<br><span class="hljs-symbol">           else:</span><br>               save_function(<span class="hljs-keyword">shard, </span>os.path.<span class="hljs-keyword">join(save_directory, </span><span class="hljs-keyword">shard_file))</span><br><span class="hljs-keyword"></span><br></code></pre></td></tr></table></figure><p><strong>代码核心逻辑概述：</strong></p><ul><li>分片处理：将大模型的参数按需分片保存，减少内存占用。</li><li>设备卸载管理：处理可能被分配到不同设备（如 CPU 或磁盘）的参数，从设备或磁盘加载卸载的参数到内存中，确保能够正确重新加载。</li><li>依赖库校验：确保环境中的库版本满足保存的要求（如 Accelerate 库版本）。</li></ul><h3 id="保存配置"><a href="#保存配置" class="headerlink" title="保存配置"></a>保存配置</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># Save the config</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-symbol">is_main_process:</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-symbol">_hf_peft_config_loaded:</span><br>                model_to_save.config.save_pretrained(save_directory)<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.can_generate():<br>                <span class="hljs-comment"># generation config built from the model config + the model config holds generation kwargs -&gt; generate</span><br>                <span class="hljs-comment"># may revert to legacy behavior if the two don&#x27;t match</span><br>                <span class="hljs-keyword">if</span> (<br>                    model_to_save.generation_config._from_model_config<br>                    <span class="hljs-keyword">and</span> model_to_save.config._has_non_default_generation_parameters()<br>                ):<br>                    new_generation_config = <span class="hljs-title class_">GenerationConfig</span>.from_model_config(model_to_save.config)<br>                    <span class="hljs-keyword">if</span> new_generation_config != model_to_save.<span class="hljs-symbol">generation_config:</span><br>                        logger.warning(<br>                            <span class="hljs-string">&quot;Your generation config was originally created from the model config, but the model &quot;</span><br>                            <span class="hljs-string">&quot;config has changed since then. Unless you pass the `generation_config` argument to this &quot;</span><br>                            <span class="hljs-string">&quot;model&#x27;s `generate` calls, they will revert to the legacy behavior where the base &quot;</span><br>                            <span class="hljs-string">&quot;`generate` parameterization is loaded from the model config instead. &quot;</span><br>                            <span class="hljs-string">&quot;To avoid this behavior and this warning, we recommend you to overwrite the generation &quot;</span><br>                            <span class="hljs-string">&quot;config model attribute before calling the model&#x27;s `save_pretrained`, preferably also &quot;</span><br>                            <span class="hljs-string">&quot;removing any generation kwargs from the model config. This warning will be raised to an &quot;</span><br>                            <span class="hljs-string">&quot;exception in v4.41.&quot;</span><br>                        )<br>                model_to_save.generation_config.save_pretrained(save_directory)<br><br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>保存模型配置：如果没有加载 PEFT 配置文件，模型的配置文件会被保存。</li><li>生成配置检查与保存：如果模型支持生成，并且生成配置与模型配置不一致，会生成一个新的生成配置，并保存该配置。如果生成配置发生变化，会发出警告，提醒用户注意生成配置的行为。</li><li>最终，保存模型的<strong>配置文件和生成配置文件</strong>config.json 和 generation_config.json ，以确保模型的完整性和生成能力能够在后续使用中被正确恢复。</li></ul><h1 id="torch-save源码分析"><a href="#torch-save源码分析" class="headerlink" title="torch.save源码分析"></a>torch.save源码分析</h1><p>在大模型训练中checkpoint的存储流程在&#x2F;home&#x2F;dell&#x2F;anaconda3&#x2F;envs&#x2F;llama_factory&#x2F;lib&#x2F;python3.11&#x2F;site-packages&#x2F;deepspeed&#x2F;runtime&#x2F;checkpoint_engine&#x2F;torch_checkpoint_engine.py中，调用<strong>torch.save</strong>(<strong>state_dict, path</strong>)函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">save</span>(<span class="hljs-params">self, state_dict, path: <span class="hljs-built_in">str</span></span>):<br>        logger.info(<span class="hljs-string">f&quot;[Torch] Saving <span class="hljs-subst">&#123;path&#125;</span>...&quot;</span>)<br>        torch.save(state_dict, path)<br>        logger.info(<span class="hljs-string">f&quot;[Torch] Saved <span class="hljs-subst">&#123;path&#125;</span>.&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><ul><li>Pytorch 保存和加载模型后缀：**.pt 和.pth**<br><strong>作用</strong>：保存一个<strong>序列化</strong>（serialized）的目标到磁盘。<br>函数使用了Python的<strong>pickle程序</strong>用于序列化。模型（models），张量<br>（tensors）和文件夹（dictionaries）都是可以用这个函数保存的目标类型</li></ul><p>在保存用于推理或者继续训练的常规检查点的时候，除了模型的state_dict之外，还必须保存其他参数。保存<strong>优化器</strong>的state_dict也非常重要，因为它包含了模型在训练时候优化器的缓存和参数。</p><h2 id="save-函数的参数列表"><a href="#save-函数的参数列表" class="headerlink" title="save 函数的参数列表"></a>save 函数的参数列表</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php">def <span class="hljs-title function_ invoke__">save</span>(<br>    <span class="hljs-attr">obj</span>: <span class="hljs-keyword">object</span>,<br>    <span class="hljs-attr">f</span>: FILE_LIKE,<br>    <span class="hljs-attr">pickle_module</span>: Any = pickle,<br>    <span class="hljs-attr">pickle_protocol</span>: <span class="hljs-keyword">int</span> = DEFAULT_PROTOCOL,<br>    <span class="hljs-attr">_use_new_zipfile_serialization</span>: <span class="hljs-keyword">bool</span> = True,<br>    <span class="hljs-attr">_disable_byteorder_record</span>: <span class="hljs-keyword">bool</span> = False<br>) -&gt; None:<br></code></pre></td></tr></table></figure><ul><li><strong>obj</strong>: object: 需要保存的对象（如张量、模型等）。</li><li><strong>f</strong>: FILE_LIKE: 目标文件，必须是一个文件类对象，能够实现 write 和 flush 方法，或者是一个包含文件路径的字符串或 os.PathLike 对象。</li><li><strong>pickle_module</strong>: Any &#x3D; pickle: 序列化时使用的模块，默认是 Python 的 pickle 模块，可以传入其他模块来控制序列化过程。</li><li><strong>pickle_protocol</strong>: int &#x3D; DEFAULT_PROTOCOL: 指定使用的 pickle 协议版本，默认使用 PyTorch 默认的协议。</li><li><strong>_use_new_zipfile_serialization</strong>: bool &#x3D; True: 是否使用新的基于 ZIP 的文件格式进行序列化。默认为 True，表示使用新格式。需要使用旧格式保存，可以将 _use_new_zipfile_serialization&#x3D;False</li><li><strong>_disable_byteorder_record</strong>: bool &#x3D; False:用于控制是否记录字节顺序。</li></ul><h2 id="核心逻辑-1"><a href="#核心逻辑-1" class="headerlink" title="核心逻辑"></a>核心逻辑</h2><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">torch._C._log_api_usage_once</span>(<span class="hljs-string">&quot;torch.save&quot;</span>)<br>    <span class="hljs-function"><span class="hljs-title">_check_dill_version</span>(<span class="hljs-variable">pickle_module</span>)</span><br>    <span class="hljs-function"><span class="hljs-title">_check_save_filelike</span>(<span class="hljs-variable">f</span>)</span><br><br></code></pre></td></tr></table></figure><ul><li><strong>torch._C._log_api_usage_once</strong>(“torch.save”)调用内部 C++ 函数 _log_api_usage_once 记录 torch.save 的 API 使用信息。PyTorch 内部会收集 API 调用的统计数据。</li><li>_<strong>check_dill_version</strong>(pickle_module)验证它的版本是否支持当前 PyTorch 的序列化需求。目的是避免由于模块版本问题导致序列化失败。</li><li>_<strong>check_save_filelike</strong>(f) 验证 f 是否是有效的文件类对象或路径。</li></ul><h3 id="检查是否使用新-ZIP-序列化格式"><a href="#检查是否使用新-ZIP-序列化格式" class="headerlink" title="检查是否使用新 ZIP 序列化格式"></a>检查是否使用新 ZIP 序列化格式</h3><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><br><span class="hljs-keyword">if</span> <span class="hljs-variable">_use_new_zipfile_serialization</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-variable">_open_zipfile_writer</span>(f) as opened_zipfile:<br>        <span class="hljs-variable">_save</span>(obj, opened_zipfile, pickle_module, pickle_protocol, <span class="hljs-variable">_disable_byteorder_record</span>)<br>        return<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-variable">_open_file_like</span>(f, <span class="hljs-string">&#x27;wb&#x27;</span>) as opened_file:<br>        <span class="hljs-variable">_legacy_save</span>(obj, opened_file, pickle_module, pickle_protocol)<br></code></pre></td></tr></table></figure><ul><li>_<strong>open_zipfile_writer</strong>(f): 打开一个 ZIP 文件写入器。 f 是文件路径，则创建对应文件。</li><li>_<strong>save</strong>(obj, opened_zipfile, pickle_module, pickle_protocol, _disable_byteorder_record):实际保存逻辑。将对象 obj 序列化并写入到 ZIP 文件中，使用指定的 pickle_module 和 pickle_protocol。<br>_disable_byteorder_record: 控制是否记录字节顺序，通常与硬件架构有关（如小端序&#x2F;大端序）。默认false。</li></ul><h2 id="def-save实际保存逻辑分析"><a href="#def-save实际保存逻辑分析" class="headerlink" title="def _save实际保存逻辑分析"></a>def _save实际保存逻辑分析</h2><h3 id="初始化数据结构"><a href="#初始化数据结构" class="headerlink" title="初始化数据结构"></a>初始化数据结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_save</span>(<span class="hljs-params">obj, zip_file, pickle_module, pickle_protocol, _disable_byteorder_record</span>):<br>    serialized_storages = &#123;&#125;<br>    id_map: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">str</span>] = &#123;&#125;<br>    storage_dtypes: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">int</span>, torch.dtype] = &#123;&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>serialized_storages</strong> &#x3D; {}存储所有被序列化的 PyTorch 存储对象（Storage）及其对应的键值对。</li><li><strong>id_map: Dict[int, str]</strong> &#x3D; {}维护<strong>存储对象</strong>的唯一标识映射。<br>键：存储对象的 _cdata 属性（内存地址）。<br>值：存储对象的唯一字符串标识符（str(len(id_map)) 自动生成）。<br>避免多次序列化同一个存储对象。</li><li><strong>storage_dtypes</strong>: Dict[int, torch.dtype] &#x3D; {}记录存储对象的 data_ptr（内存指针）和其数据类型。保证同一内存地址的数据类型一致。</li></ul><p>这部分代码的目的是初始化保存过程中需要追踪的信息结构：</p><ol><li>serialized_storages：记录被序列化的存储对象，便于后续写入 ZIP 文件</li><li>id_map：确保存储对象的唯一标识，用于多次引用时避免重复保存。</li><li>storage_dtypes：确保数据类型一致性，防止跨张量操作引发错误。</li></ol><h3 id="生成存储对象的唯一标识符和元信息流程"><a href="#生成存储对象的唯一标识符和元信息流程" class="headerlink" title="生成存储对象的唯一标识符和元信息流程"></a>生成存储对象的唯一标识符和元信息流程</h3><ul><li>判断对象是否为 PyTorch 存储类型（TypedStorage 或旧版 Storage）。</li><li>为特定对象生成持久化 ID，在序列化过程中标记特殊类型的数据对象。<figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">def</span> persistent_id(obj):<br>        <span class="hljs-keyword">if</span> isinstance(obj, torch.storage.<span class="hljs-type">TypedStorage</span>) or torch.is_storage(obj):<br><br>            <span class="hljs-keyword">if</span> isinstance(obj, torch.storage.<span class="hljs-type">TypedStorage</span>):<br>                # <span class="hljs-type">TODO</span>: <span class="hljs-type">Once</span> we decide to break serialization <span class="hljs-type">FC</span>, this <span class="hljs-keyword">case</span><br>                # can be deleted<br>                storage = obj._untyped_storage<br>                storage_d<span class="hljs-keyword">type</span> = obj.dtype<br>                storage_type_str = obj._pickle_storage_type()<br>                storage_<span class="hljs-keyword">type</span> = getattr(torch, storage_type_str)<br>                storage_numel = obj._size()<br><br>            <span class="hljs-keyword">else</span>:<br>                storage = obj<br>                storage_d<span class="hljs-keyword">type</span> = torch.uint8<br>                storage_<span class="hljs-keyword">type</span> = normalize_storage_type(type(obj))<br>                storage_numel = storage.nbytes()<br>                 <br></code></pre></td></tr></table></figure></li><li>处理 TypedStorage 类型（具备类型信息的存储）：</li></ul><ol><li>storage &#x3D; obj._untyped_storage 获取 TypedStorage 的底层非类型化存储（UntypedStorage），TypedStorage 是 Storage 的高级抽象，增加了数据类型信息。</li><li>storage_dtype &#x3D; obj.dtype提取存储对象的数据类型（如 torch.float16）。</li><li>storage_type_str &#x3D; obj._pickle_storage_type() 获取存储对象的类型名称（如 FloatStorage）。通过 getattr 获取对应的类型对象。</li><li>storage_numel &#x3D; obj._size()获取存储对象的元素数量（numel）。</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> storage<span class="hljs-selector-class">.data_ptr</span>() != <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> storage<span class="hljs-selector-class">.data_ptr</span>() <span class="hljs-keyword">in</span> storage_dtypes:<br>                    <span class="hljs-keyword">if</span> storage_dtype != storage_dtypes<span class="hljs-selector-attr">[storage.data_ptr()]</span>:<br>                        raise <span class="hljs-built_in">RuntimeError</span>(<br>                            <span class="hljs-string">&#x27;Cannot save multiple tensors or storages that &#x27;</span><br>                            <span class="hljs-string">&#x27;view the same data as different types&#x27;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    storage_dtypes<span class="hljs-selector-attr">[storage.data_ptr()]</span> = storage_dtype<br><br>            storage_key = id_map<span class="hljs-selector-class">.setdefault</span>(storage._cdata, <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(id_map)))<br>            location = <span class="hljs-built_in">location_tag</span>(storage)<br>            serialized_storages<span class="hljs-selector-attr">[storage_key]</span> = storage<br><br>            return (<span class="hljs-string">&#x27;storage&#x27;</span>,<br>                    storage_type,<br>                    storage_key,<br>                    location,<br>                    storage_numel)<br><br>        return None<br></code></pre></td></tr></table></figure><ul><li>if storage.data_ptr() !&#x3D; 0:检查存储对象的指针（data_ptr）是否非零。data_ptr() 返回存储的底层内存地址。</li><li>storage.data_ptr() in storage_dtypes：检查当前存储对象的内存地址是否已存在于 storage_dtypes 中。如果该存储的内存地址尚未记录，存储其对应的数据类型。</li><li>storage_key &#x3D; id_map.setdefault(storage._cdata, str(len(id_map)))为存储对象分配唯一的键（storage_key）。</li><li>location &#x3D; location_tag(storage)获取存储的设备位置信息（如 cpu 或 cuda:0）。</li><li>serialized_storages[storage_key] &#x3D; storage将存储对象按其键（storage_key）保存到 serialized_storages 字典中。</li><li>生成并返回该存储对象的持久化 ID（元组）。</li><li>如果对象 obj 不是存储对象，则返回 None，表示无需特殊处理。</li></ul><p><strong>总结：</strong></p><ul><li>首先判断对象类型（<strong>TypedStorage 和普通 Storage</strong>），提取存储元信息：数据类型、存储类型、大小等元信息。</li><li>然后检查存储是否已分配内存<strong>storage.data_ptr() !&#x3D; 0</strong>，未分配无需进行类型检查。否则检查存储的 data_ptr() 是否已经存在于 storage_dtypes，if <strong>storage_dtype !&#x3D; storage_dtypes[storage.data_ptr()]<strong>，如果当前存储的 dtype 与之前记录的不一致，抛出一个运行时错误。这确保了同一块内存地址上的存储不能在序列化过程中以不同的数据类型保存。如果该 data_ptr() 尚未记录，将当前存储的 dtype 添加到 storage_dtypes 字典中，方便后续检查。</strong>storage_dtypes[storage.data_ptr()] &#x3D; storage_dtype</strong>。<strong>确保引用相同内存地址的多个存储对象在序列化过程中具有一致的数据类型。</strong></li><li>为当前存储生成或获取一个唯一的 <strong>storage_keystorage_key &#x3D; id_map.setdefault(storage._cdata, str(len(id_map)))</strong></li><li>最后返回持久化标识符，用于后续保存和加载过程中的关联</li></ul><h3 id="对象序列化为二进制数据"><a href="#对象序列化为二进制数据" class="headerlink" title="对象序列化为二进制数据"></a>对象序列化为二进制数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Write the pickle data for `obj`</span><br>   data_buf = io.BytesIO()<br>   pickler = pickle_module.Pickler(data_buf, protocol=pickle_protocol)<br>   pickler.persistent_id = persistent_id<br>   pickler.dump(obj)<br>   data_value = data_buf.getvalue()<br>   zip_file.write_record(<span class="hljs-string">&#x27;data.pkl&#x27;</span>, data_value, <span class="hljs-built_in">len</span>(data_value))<br><br>   <span class="hljs-comment"># Write byte order marker</span><br>   <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> _disable_byteorder_record:<br>       <span class="hljs-keyword">if</span> sys.byteorder <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;little&#x27;</span>, <span class="hljs-string">&#x27;big&#x27;</span>]:<br>           <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Unknown endianness type: &#x27;</span> + sys.byteorder)<br><br>       zip_file.write_record(<span class="hljs-string">&#x27;byteorder&#x27;</span>, sys.byteorder, <span class="hljs-built_in">len</span>(sys.byteorder))<br></code></pre></td></tr></table></figure><ul><li><strong>data_buf &#x3D; io.BytesIO</strong>() 创建一个内存中的二进制数据缓冲区（BytesIO 对象），存在于内存中，用于存储后续序列化生成的数据。</li><li>创建一个 <strong>Pickler</strong> 对象，用于将 obj 序列化为二进制数据。<strong>pickle_protocol</strong>: 序列化使用的协议版本。</li><li><strong>pickler.persistent_id &#x3D; persistent_id</strong>将 persistent_id 函数分配给 pickler 对象，用于处理序列化中的持久性对象。</li><li><strong>pickler.dump</strong>(obj)使用 Pickler 对象将 obj 序列化为二进制数据，并写入 data_buf 中。<strong>dump</strong> 方法是 Pickler 提供的序列化操作。</li><li><strong>data_value &#x3D; data_buf.getvalue</strong>()从 data_buf 中提取已经序列化的二进制数据，存储到变量 <strong>data_value</strong> 中。</li><li><strong>zip_file.write_record</strong>(‘<strong>data.pkl’, data_value, len(data_value</strong>))将序列化的二进制数据 data_value 写入到 zip_file 中，文件名为 ‘data.pkl’。</li><li>检查是否需要禁用字节序标记写入功能，<strong>sys.byteorder</strong>: 系统的字节序，可以是 ‘little’（小端序）或 ‘big’（大端序）。如果检测到未知字节序，则抛出异常。</li><li><strong>zip_file.write_record(‘byteorder’, sys.byteorder, len(sys.byteorder</strong>))将系统的字节序（sys.byteorder）作为记录写入 zip_file，文件名为 ‘byteorder’。数据内容是 ‘little’ 或 ‘big’。</li></ul><h3 id="张量存储器的保存"><a href="#张量存储器的保存" class="headerlink" title="张量存储器的保存"></a>张量存储器的保存</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># <span class="hljs-keyword">Write</span> <span class="hljs-keyword">each</span> tensor <span class="hljs-keyword">to</span> a file named tensor/the_tensor_key <span class="hljs-keyword">in</span> the zip archive<br>   <span class="hljs-keyword">for key</span> <span class="hljs-keyword">in</span> sorted(serialized_storages.keys()):<br>       <span class="hljs-type">name</span> = f<span class="hljs-string">&#x27;data/&#123;key&#125;&#x27;</span><br>       storage = serialized_storages[key]<br>       # given that we <span class="hljs-keyword">copy</span> things around anyway, we might use <span class="hljs-keyword">storage</span>.cpu()<br>       # this means <span class="hljs-keyword">to</span> that <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> tensors serialized, you need <span class="hljs-keyword">to</span> implement<br>       # .cpu() <span class="hljs-keyword">on</span> the underlying <span class="hljs-keyword">Storage</span><br>       <span class="hljs-keyword">if</span> <span class="hljs-keyword">storage</span>.device.<span class="hljs-keyword">type</span> != <span class="hljs-string">&#x27;cpu&#x27;</span>:<br>           storage = <span class="hljs-keyword">storage</span>.cpu()<br>       # Now that it <span class="hljs-keyword">is</span> <span class="hljs-keyword">on</span> the CPU we can directly <span class="hljs-keyword">copy</span> it <span class="hljs-keyword">into</span> the zip file<br>       num_bytes = <span class="hljs-keyword">storage</span>.nbytes()<br>       zip_file.write_record(<span class="hljs-type">name</span>, <span class="hljs-keyword">storage</span>, num_bytes)<br></code></pre></td></tr></table></figure><ul><li>遍历 <strong>serialized_storages</strong> 的所有键，并按字母顺序排序，serialized_storages: 一个字典，其中键是张量的名称或标识符，值是对应的存储对象（通常为张量的底层数据）。</li><li>**name &#x3D; f’data&#x2F;{key}’**，生成该键对应的文件路径，存储为变量 name，文件路径以 ‘data&#x2F;‘ 为前缀，再加上键值 key。</li><li><strong>storage &#x3D; serialized_storages[key]</strong> serialized_storages 字典中获取当前键 key 对应的存储对象，赋值给变量 storage。</li><li><strong>if storage.device.type !&#x3D; ‘cpu’</strong>:检查当前存储对象是否位于非 CPU 设备上（如 GPU）。 <strong>storage &#x3D; storage.cpu</strong>()如果设备类型不是 ‘cpu’，则将存储对象移至 CPU。</li><li><strong>num_bytes &#x3D; storage.nbytes</strong>()获取当前存储对象占用的字节数，赋值给变量 num_bytes。</li><li>**zip_file.write_record(name, storage, num_bytes)**将存储对象 <strong>storage</strong> 写入压缩文件中，文件名为 name。<br><strong>name</strong>: 文件路径（如 ‘data&#x2F;weight’）。<br><strong>storage</strong>: 需要写入的数据内容。<br><strong>num_bytes</strong>: 数据的字节大小，用于告知写入函数内假设是一个自定义方法，负责将数据写入到压缩文件中。</li></ul><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ol><li><strong>对象序列化（Pickle）并存储</strong>：使用 pickle 序列化模块将指定的对象 obj 转换为二进制数据。序列化后的数据被存储在内存缓冲区中，并写入压缩文件 zip_file，文件名为 ‘data.pkl’。</li><li><strong>记录字节序（Byte Order Marker</strong>）：检查系统的字节序（sys.byteorder），确保它是有效的（’little’ 或 ‘big’）。将字节序信息写入压缩文件中，文件名为 ‘byteorder’。</li><li><strong>张量数据的存储</strong>：遍历所有张量存储（serialized_storages 字典中的键值对）。为每个张量生成文件路径，存储为 ‘data&#x2F;<tensor_key>‘。<br>如果张量数据不在 CPU 上（如位于 GPU 上），将其移动到 CPU，确保数据可以被序列化并存储。获取张量数据的字节大小，并将其内容写入压缩文件中。</li></ol><h2 id="def-save函数核心逻辑"><a href="#def-save函数核心逻辑" class="headerlink" title="def_save函数核心逻辑"></a>def_save函数核心逻辑</h2><p>这段代码提供了一个通用的机制，用于将复杂对象和张量序列化并存储在压缩文件中</p><ol><li><strong>初始化数据结构</strong>：</li></ol><ul><li>定义 serialized_storages 用于存储序列化后的张量存储器。</li><li>使用 id_map 记录每个存储器的唯一标识符，避免重复序列化相同数据。</li><li>通过 storage_dtypes 确保多个存储器（storages）共享同一底层数据时，它们的数据类型（dtype）一致</li></ul><ol start="2"><li><strong>生成存储对象的唯一标识符和元信息</strong>：</li></ol><ul><li>该方法处理张量的存储器序列化逻辑，并返回一个包含存储器元数据的标识符（tuple）。</li><li>记录存储器的类型、唯一键、位置（设备）、元素数量等信息。</li><li>检查共享数据指针的存储器是否具有相同的数据类型，确保数据一致性。<br>将存储器添加到 serialized_storages 中，并通过 id_map 分配唯一键名。</li></ul><ol start="3"><li><strong>对象序列化和保存：</strong></li></ol><ul><li>使用 pickle 模块将对象（obj）序列化为二进制数据。</li><li>通过 pickle_module.Pickler 实现自定义序列化行为，并将persistent_id 用于处理张量存储器的特殊序列化需求。</li><li>将序列化后的对象数据写入压缩文件，文件名为 data.pkl。<br>4.<strong>存储字节序（Byte Order Marker）：</strong></li><li>检查系统的字节序（sys.byteorder），确保数据可以跨平台读取。将字节序信息写入压缩文件，文件名为 byteorder。</li></ul><ol start="5"><li><strong>张量存储器的保存：</strong></li></ol><ul><li>遍历 serialized_storages 中的所有张量存储器。如果存储器不在 CPU 上，则将其移动到 CPU。</li><li>获取存储器的字节大小并将其内容写入压缩文件，路径为 data&#x2F;<storage_key>。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Llama_factory</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
